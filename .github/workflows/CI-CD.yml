name: CI/CD

on:
  push:
    branches: [ release ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # main/resources에 기본 프로퍼티 파일 생성
      - run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 빌드 후 .jar 파일 확인
      - name: Verify build artifact
        run: |
          ls -al ./build/libs/  # 여기서 .jar 파일이 존재하는지 확인

      # 아티팩트 경로 설정 (set-output 대신 GITHUB_ENV 사용)
      - name: Set artifact path
        id: set-artifact-path
        run: |
          artifact="./build/libs/RoomIt_BE-0.0.1-SNAPSHOT.jar"
          echo "artifact=$artifact" >> $GITHUB_ENV  # GITHUB_ENV에 아티팩트 경로 설정

      # postdeploy.sh 배포 패키지에 포함
      - name: Include postdeploy.sh in deployment package
        run: |
          echo "${{ secrets.POSTDEPLOY_SCRIPT }}" > ./postdeploy.sh
          mkdir -p ./src/.platform/hooks/postdeploy
          mv ./postdeploy.sh ./src/.platform/hooks/postdeploy/postdeploy.sh

      # 업로드된 아티팩트를 v4로 업로드
      - name: Upload artifact v4
        uses: actions/upload-artifact@v4
        with:
          name: homework
          path: ./build/libs/RoomIt_BE-0.0.1-SNAPSHOT.jar

      # 빌드된 파일 및 postdeploy.sh가 포함된 배포 패키지 업로드
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ./src

  cd:
    runs-on: ubuntu-latest
    needs: ci  # ci 작업이 완료된 후 실행
    steps:
      # 현재 시간 정보 가져오기 (cd 작업에서 실행)
      - name: Get current time
        id: current-time
        run: |
          current_time=$(date -u +'%Y-%m-%dT%H-%M-%S')
          echo "current_time=$current_time" >> $GITHUB_ENV  # 현재 시간 환경 변수로 설정

      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ssh-key.pem
          chmod 600 /tmp/ssh-key.pem

      # EC2에서 S3에서 python-server 폴더 다운로드
      - name: Download python-server folder from S3 to EC2
        run: |
          ssh -i /tmp/ssh-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
          sudo mkdir -p /Docker/python-server &&
          sudo chown -R ec2-user:ec2-user /Docker &&
          sudo chmod -R 777 /Docker
          "
          ssh -i /tmp/ssh-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            aws s3 sync s3://bumblebee.roomit/python-server /Docker/python-server --region ap-northeast-2
          "
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      # 다운로드된 아티팩트 및 배포 패키지 다운로드
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      # 다운로드된 파일 목록 확인
      - name: List downloaded files
        run: |
          ls -al ./  # 현재 디렉토리에서 파일들을 확인

      # 빈스톡에 배포
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: bumblebee-final
          environment_name: Bumblebee-final-env
          version_label: github-action-${{ env.current_time }}
          region: ap-northeast-2
          deployment_package: ./  # 올바른 경로로 수정, 또는 다운로드된 파일 이름을 명시적으로 지정




