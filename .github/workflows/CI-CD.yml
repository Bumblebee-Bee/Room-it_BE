name: CI/CD

on:
  push:
    branches: [ release ]

jobs:
  # CI: Continuous Integration
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Docker Compose 설치
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Docker Compose 버전 확인
      - name: Check Docker Compose version
        run: docker-compose --version

      # main/resources에 기본 프로퍼티 파일 생성
      - run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties  # 파일 생성
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties  # 파일에 내용 추가

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 현재 시간 정보 가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # 아티팩트 경로 설정
      - name: Set artifact path
        run: |
          artifact=$(ls ./build/libs/RoomIt_BE-0.0.1-SNAPSHOT.jar | head -n 1)
          artifact=${artifact//\"/}  # Remove any double quotes from the artifact path
          echo "artifact=$artifact" >> $GITHUB_ENV  # Set the artifact as an output
          echo "Artifact path: $artifact"

      # S3에 python-server 폴더 업로드 (최초 및 업데이트 시)
      - name: Upload python-server folder to S3
        run: |
          aws s3 cp ./python-server s3://bumblebee.roomit/python-server --recursive --region ap-northeast-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

  # CD: Continuous Deployment
  cd:
    runs-on: ubuntu-latest
    needs: ci  # ci job이 완료된 후 실행
    steps:
      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ssh-key.pem
          chmod 600 /tmp/ssh-key.pem

      # EC2에서 S3에서 python-server 폴더 다운로드
      - name: Download python-server folder from S3 to EC2
        run: |
          ssh -i /tmp/ssh-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
          sudo mkdir -p /Docker/python-server && 
          sudo chown -R ec2-user:ec2-user /Docker && 
          sudo chmod -R 777 /Docker
          "
          ssh -i /tmp/ssh-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            aws s3 sync s3://bumblebee.roomit/python-server /Docker/python-server --region ap-northeast-2
          "
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      # Elastic Beanstalk 배포
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: bumblebee-final
          environment_name: Bumblebee-final-env
          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}  # 현재 시간 사용
          region: ap-northeast-2
          deployment_package: ${{ needs.ci.outputs.artifact }}  # CI job에서 output으로 설정한 artifact 경로 사용
